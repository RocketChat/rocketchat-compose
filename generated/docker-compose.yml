services:
  rocketchat:
    image: ${IMAGE:-registry.rocket.chat/rocketchat/rocket.chat}:${RELEASE:-latest}
    restart: always
    labels:
      prometheus.io/scrape: "true"
      prometheus.io/port: ${METRICS_PORT:-9458}
    environment:
      ROOT_URL: ${ROOT_URL:-http://localhost}
      PORT: ${PORT:-3000}
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: compose
      REG_TOKEN: ${REG_TOKEN:-}
      LICENSE_DEBUG: true
      OVERWRITE_SETTING_Prometheus_Enabled: true
      OVERWRITE_SETTING_Prometheus_Port: "${METRICS_PORT:-9458}"
      MONGO_URL: ${MONGO_URL:-mongodb://mongodb:27017/rocketchat?replicaSet=rs0}
      TRANSPORTER: "${NATS_URL-monolith+nats://nats:4222}"
      INSTANCE_IP: "${INSTANCE_IP:-}"
    expose:
      - ${PORT:-3000}
      - ${METRICS_PORT:-9458}
    ports:
      - "${BIND_IP:-0.0.0.0}:${HOST_PORT:-3000}:${PORT:-3000}"
      - "${BIND_IP:-0.0.0.0}:${METRICS_PORT:-9458}:${METRICS_PORT:-9458}"
    # healthcheck:
    #   test: ["CMD", "nc", "-zv", "-w", "10", "rocketchat", "${PORT:-3000}"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 10
    #   start_period: 30s
  nats:
    image: docker.io/nats:${NATS_VERSION:-2.11-alpine}
    restart: always
    expose:
      - 4222
      - 8222
      - 6222
    # healthcheck:
    #   test: ["CMD", "nc", "-zv", "-w", "10", "nats", "4222"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 10
    #   start_period: 30s
    command: --http_port 8222
  nats-exporter:
    image: docker.io/bitnami/nats-exporter:${NATS_EXPORTER_VERSION:-0.17.3}
    depends_on:
      - nats
    expose:
      - 7777
    command:
      - -healthz
      - -varz
      - "http://nats:8222"
  mongodb:
    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-6.0}
    restart: always
    volumes:
      - ${MONGODB_HOST_PATH:-mongodb_data}:/bitnami/mongodb
    environment:
      MONGODB_REPLICA_SET_MODE: ${MONGODB_REPLICA_SET_MODE:-primary}
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}
    # healthcheck:
    #   test: ["CMD", "mongosh", "--host", "mongodb", "--port", "${MONGODB_PORT_NUMBER:-27017}", "--eval", "db.adminCommand('ping')"]
    #   interval: 30s
    #   timeout: 30s
    #   retries: 10
    #   start_period: 30s
    expose:
      - ${MONGODB_PORT_NUMBER:-27017}
    ports:
      - "${MONGODB_BIND_IP:-127.0.0.1}:${MONGODB_PORT_NUMBER:-27017}:${MONGODB_PORT_NUMBER:-27017}"
  mongodb-exporter:
    image: docker.io/percona/mongodb_exporter:${MONGODB_EXPORTER_VERSION:-0.44.0}
    depends_on:
      - mongodb
    expose:
      - 9216
    command:
      - --mongodb.uri=${MONGODB_URI:-mongodb://mongodb:27017}
      - --collect-all
      - --compatible-mode
  traefik-init:
    image: docker.io/alpine:latest
    entrypoint: sh
    command:
      - -c
      - "set -e\n# quote 'eof' to prevent variable expansion\nrm -rf /traefik_config/* || true\nmkdir -p /traefik_config/http /traefik_config/https\ncat <<'EOF' | tee /traefik_config/http/dynamic.yml\nhttp:\n  routers:\n    rocketchat:\n      entryPoints:\n        - http\n      service: rocketchat\n      rule: Host(`{{ env \"DOMAIN\" }}`) && PathPrefix(`/`)\n    grafana:\n      entryPoints:\n        - http\n      service: grafana\n      rule: |-\n        {{ if eq (env \"GRAFANA_DOMAIN\") \"\" }}\n          Host(`{{ env \"DOMAIN\" }}`) && PathPrefix(`{{ env \"GRAFANA_PATH\" }}`)\n        {{ else }}\n          Host(`{{ env \"GRAFANA_DOMAIN\" }}`)\n        {{ end }}\n  services:\n    rocketchat:\n      loadBalancer:\n        servers:\n          - url: \"http://rocketchat:3000\"\n    grafana:\n      loadBalancer:\n        servers:\n          - url: \"http://grafana:3000\"\nEOF\n\ncat <<'EOF' | tee /traefik_config/https/dynamic.yml\nhttps:\n  address: \":443\"\n  http:\n    redirections:\n      entryPoint:\n        to: \"http\"\n        scheme: \"https\"\nhttp:\n  routers:\n    rocketchat:\n      entryPoints:\n        - https\n      service: rocketchat\n      rule: Host(`{{ env \"DOMAIN\" }}`)\n      tls:\n        certResolver: le\n    grafana:\n      entryPoints:\n        - https\n      rule: |\n        {{ if eq (env \"GRAFANA_DOMAIN\") \"\" }}\n          Host(`{{ env \"DOMAIN\" }}`) && PathPrefix(`{{ env \"GRAFANA_PATH\" }}`)\n        {{ else }}\n          Host(`{{ env \"GRAFANA_DOMAIN\" }}`)\n        {{ end }}\n      service: grafana\n      tls:\n        certResolver: le\n  services:\n    rocketchat:\n      loadBalancer:\n        servers:\n          - url: \"http://rocketchat:3000\"\n    grafana:\n      loadBalancer:\n        servers:\n          - url: \"http://grafana:3000\"\nEOF\n  "
    volumes:
      - traefik_config:/traefik_config
    restart: "no"
  traefik:
    image: docker.io/traefik:${TRAEFIK_RELEASE:-v3.4}
    restart: always
    depends_on:
      - traefik-init
    environment:
      DOMAIN: "${DOMAIN:-localhost}"
      GRAFANA_DOMAIN: "${GRAFANA_DOMAIN-}"
      GRAFANA_PATH: "${GRAFANA_PATH-/}"
      TRAEFIK_PROTOCOL: "${TRAEFIK_PROTOCOL-}"
    command:
      - --api.insecure=${TRAEFIK_API_INSECURE:-false}
      - --providers.docker=false
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:${TRAEFIK_HTTP_PORT:-80}
      - --entrypoints.https.address=:${TRAEFIK_HTTPS_PORT:-443}
      - --entrypoints.metrics.address=:9096
      - --metrics.prometheus=true
      # ssl
      - --certificatesresolvers.le.acme.tlschallenge=${LETSENCRYPT_ENABLED:-false}
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL?need email for cert expiry notifications}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      # ssl
      - --metrics.prometheus.entryPoint=metrics # Associate metrics with the 'metrics' entry point
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --providers.file.filename=/traefik_config/${TRAEFIK_PROTOCOL}/dynamic.yml
      - --providers.file.watch=true
    ports:
      - ${TRAEFIK_HTTP_PORT:-80}:${TRAEFIK_HTTP_PORT:-80}
      - ${TRAEFIK_DASHBOARD_PORT:-8080}:8080
      - ${TRAEFIK_HTTPS_PORT:-443}:${TRAEFIK_HTTPS_PORT:-443}
    expose:
      - 9096
      - ${TRAEFIK_HTTP_PORT:-80}
      - ${TRAEFIK_DASHBOARD_PORT:-8080}
      - ${TRAEFIK_HTTPS_PORT:-443}
    volumes:
      - traefik_ssl:/letsencrypt:rw
      - traefik_config:/traefik_config:Z
      # healthcheck:
      #   test: ["CMD", "traefik", "healthcheck"]
      #   interval: 30s
      #   timeout: 30s
      #   retries: 5
      #   start_period: 30s
volumes:
  mongodb_data:
    driver: local
  # this is for ssl shennanigans, users usually won't need to bother with it
  traefik_ssl:
    driver: local
  traefik_config:
    driver: local
